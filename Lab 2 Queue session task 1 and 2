 
 #Task 1 
 
import numpy as np #importing numpy array 
class Q:
  def _init_ (self):
    self.list=np.arrange(3)
  def enqueue(self, data):
    abc=np.append(self.list, data)
    return abc
  def dequeue(self):
    ghi=np.delete((self.list,1))
    return ghi
  def frontofqueue(self):
    jkl=self.list[0]
    return jkl
  def rearofqueue(self):
    ijk=self.list[-1]
    return ijk
  def lengthofqueue(self):
    lmn=len(self.list)
    return lmn
  def sizeofqueue(self):
    spq=(len(self.list>5))
    return spq
  def emptyqueue(self):
    xyz=(len(selflist)==0)
    return xyz
    
   
   #Task 2 
 from collections import deque
value=deque()
value.append(135)
value.append(2345)
value.append(334)
value.append(45)
print(value)
value.appendleft(6)
print(value)
value.pop
print(value)
value.popleft()
print(value)
value.clear()
print(value)





#Linked List Lab Task 

#code
#LAB LINKED LIST 

class node:
  def _init_(self,data=None):
    self.data=data
    self.next=None
    print("Node created")

class linkedlist:
  def _init_(self):
    self.head=node()
    print("Head intialized")

  def append(self,data):
    newnode=node(data)
    curr=self.head
    while curr.next!=None:
      curr=curr.next
    curr.next=new_node

  def display(self):
    curr=self.head
    dis=[]
    while curr.next!=None:
      curr=curr.next
      dis.append(curr.data)
    print(dis)

  def delete(self):
    curr=self.head 
    while curr.next.next!=None:
      secondlast_node=curr.next
      curr=curr.next
    curr.next=None
   
  def length(self):
    curr=self.head
    count=0
    while curr.next!=None:
      curr=curr.next
      count=count+1
    return count

  def insert(self,data,index):
    newnode=node(data)
    if (index<1):
      print("Out of bound index.")
    elif(index==1):
      newnode.next=self.head
      self.head=newnode
    else:
      curr=self.head 
      for X in range(1,index-1):
        if(curr!=None):
          curr=curr.next
        if(curr!=None):
          new_node.next=curr.next
          curr.next=new_node
        else:
          print("null node previous")

  def appendbefore(self,data):
    newnode=node(data)
    newnode.next=self.head
    self.head=newnode

l=linkedlist()
l.append(1)
l.append(2)
l.append(3)
l.append(4)
l.display()
